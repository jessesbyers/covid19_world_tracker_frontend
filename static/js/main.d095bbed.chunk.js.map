{"version":3,"sources":["components/NavBar.js","components/CountryDropdown.js","components/Loader.js","containers/New.js","d3/DrawMap.js","d3/SizeLegend.js","d3/Color.js","d3/DisplayMapData.js","components/MapInput.js","containers/Home.js","d3/DrawBar.js","d3/Viz.js","components/Province.js","components/State.js","containers/Show.js","components/Country.js","containers/Collection.js","App.js","reducers/countryDataReducer.js","reducers/rootReducer.js","reducers/cacheReducer.js","reducers/countriesReducer.js","reducers/collectionReducer.js","reducers/provincesDataReducer.js","index.js"],"names":["NavBar","style","paddingBottom","marginBottom","className","to","CountryDropdown","props","countries","useSelector","state","collection","dispatch","useDispatch","Row","Col","xs","sm","md","lg","xl","onChange","event","target","value","split","slug","country","ISO2","a","requestOptions","method","redirect","fetch","response","json","data","parsedData","filter","day","Confirmed","type","payload","fetchData","fetchCountry","placeholder","sort","b","Country","map","id","Slug","key","disabled","length","index","flagUrl","toLowerCase","worldUrl","Card","Header","Img","src","onError","e","Loader","New","useState","isLoading","setIsLoading","url","useEffect","console","log","DrawMap","svg","select","append","attr","projection","geoNaturalEarth1","pathGenerator","geoPath","g","call","zoom","on","transform","Promise","all","tsv","then","tsvData","topoJSONdata","countryName","forEach","d","iso_n3","name","feature","objects","selectAll","features","enter","text","sizeLegend","selection","sizeScale","spacing","textOffset","numTicks","tickFormat","ticks","reverse","groups","groupsEnter","merge","i","exit","remove","color","caseType","DisplayMapData","caseTitle","radiusValue","scaleSqrt","domain","max","range","countryInfo","long","lat","format","numberFormat","MapInput","countryResults","setCountryResults","onClick","innerText","Home","DrawBar","totalCases","dailyData","string","margin","innerWidth","vizName","yAxisLabel","charAt","toUpperCase","slice","title","xScale","scaleBand","dayCount","padding","yScale","scaleLinear","tip","d3Tip","offset","html","toLocaleString","date","toLocaleDateString","total","active","recovered","deaths","xAxisG","join","bandwidth","show","hide","axisBottom","tickValues","yAxisG","axisLeft","tickSize","titleG","width","Viz","Province","province","provinceData","array","push","Date","Active","Recovered","Deaths","parseData","toString","trim","replace","State","stateData","substring","includes","sum","Show","cache","provincesData","setCaseType","provinces","setProvinces","location","provinceArray","sortedProvinces","Object","keys","find","obj","pathname","Collection","countryData","App","basename","process","Container","fluid","exact","path","render","routerProps","component","countryDataReducer","action","rootReducer","combineReducers","countryReducer","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.d095bbed.chunk.js","sourcesContent":["import React from 'react';\nimport { NavLink } from 'react-router-dom';\n\nconst NavBar = () => {\n\n  return (\n    <div style={{ paddingBottom: '15px', marginBottom: '15px' }}>\n        <h1 className=\"header\" >COVID-19 World Tracker</h1>\n\n        <NavLink \n        to=\"/\">\n          <button className=\"nav\">Home</button>\n        </NavLink>\n\n        <NavLink \n        to=\"/new\">\n          <button className=\"nav\">Create a New Collection</button>\n        </NavLink>\n    </div>\n  );\n}\n\nexport default NavBar;","// need to split off into multiple components\n\nimport React from 'react';\nimport { useSelector, useDispatch } from 'react-redux'\n\nimport { NavLink } from 'react-router-dom';\nimport { Row } from 'react-bootstrap'\nimport { Col } from 'react-bootstrap'\nimport { Card } from 'react-bootstrap'\n\nconst CountryDropdown = (props) => {\n\n    const countries = useSelector(state => state.countries)\n    const collection = useSelector(state => state.collection)\n    const dispatch = useDispatch()\n\n    const fetchCountry = (event) => {\n        const [slug, country, ISO2] = event.target.value.split(\",\") \n\n        async function fetchData() {\n\n            const requestOptions = {\n                method: 'GET',\n                redirect: 'follow'\n            };\n            \n            // const response = await fetch(`https://api.covid19api.com/total/country/` + `${slug}`, requestOptions)\n            const response = await fetch(`https://api.covid19api.com/total/country/` + slug, requestOptions)\n\n            const data = await response.json()\n            const parsedData = data.filter(day => day.Confirmed > 0)\n\n            dispatch( { type: 'addCountryData', payload: { [country]: parsedData }} )\n            dispatch( { type: 'addCountryToCollection', payload: {slug, country, ISO2}} )\n        }\n        fetchData();\n    }\n\n    const invalid = () => collection.length === 0\n\n    return (\n        <Row>\n            <Col xs=\"12\" sm=\"6\" md=\"4\" lg=\"3\" xl=\"3\">\n\n                <select onChange={event => fetchCountry(event)}>\n                \n                    <option placeholder=\"Choose a Collection of Countries\">Choose a Collection of Countries</option>\n                    {countries.sort((a, b) => (a.Country > b.Country) ? 1 : -1).map(country => (\n                        <option\n                            id={country.Slug}\n                            key={country.Slug}\n                            value={[country.Slug, country.Country, country.ISO2]}\n                        >\n                        {country.Country}\n                        </option> \n                    ))}\n                </select>\n\n\n\n                <NavLink to='/collection'>\n                    <button className=\"dark\" disabled={invalid()}>View Collection</button>\n                </NavLink>\n\n            </Col>\n\n\n            {collection.map( (country, index) => {\n                const flagUrl = `https://disease.sh/assets/img/flags/${country.ISO2.toLowerCase()}.png`\n                const worldUrl = `https://freesvg.org/img/Globe-Icon-Umber.png`\n\n                return (\n\n                    <Col xs={12} sm={6} md={4} lg={3} key={index}>\n\n                        <Card>\n                            <Card.Header>{country.country}</Card.Header>\n\n                            <Card.Img key={country.slug} src={flagUrl} onError={(e)=>{ \n                                if (e.target.src !== worldUrl) {\n                                    e.target.src=worldUrl;}\n                                }}/>\n                        </Card>\n                    </Col>\n                )\n            })}\n\n        </Row>\n\n    )\n}\n\nexport default CountryDropdown\n\n\n\n","import React from 'react';\n\nexport const Loader = () => {\n    return (                 \n        <button className=\"dark\">LOADING DATA...</button>\n    )\n}\n","import React, { useState, useEffect } from 'react';\nimport CountryDropdown from '../components/CountryDropdown'\nimport { Loader } from '../components/Loader'\nimport { useDispatch } from \"react-redux\";\n\nconst New = () => {\n    const [isLoading, setIsLoading] = useState(false);\n    const dispatch = useDispatch()\n    const url = \"https://api.covid19api.com/dayone/country/united-states\"\n    // const url = \"https://api.covid19api.com/dayone/country/china\"\n\n \n    useEffect( () => {\n        async function fetchData() {\n            setIsLoading(true);\n\n            var requestOptions = {\n                method: 'GET',\n                redirect: 'follow'\n              };\n\n            const response = await fetch(\"https://api.covid19api.com/countries\", requestOptions)\n            const data = await response.json()\n            dispatch({ type: 'addCountries', payload: data })\n            setIsLoading(false);\n        }\n        fetchData();\n    }, []); \n\n                useEffect( () => {\n                    console.log(\"inside fetch for US data\")\n                    async function fetchData() {\n                        setIsLoading(true);\n\n                        var requestOptions = {\n                            method: 'GET',\n                            redirect: 'follow'\n                        };\n                        \n                        const response = await fetch(url, requestOptions)\n                        const data = await response.json()\n                        console.log(data)\n                        dispatch({ type: 'cacheData', payload: {slug: \"united-states\", data} })\n                        setIsLoading(false);\n                    }\n                    fetchData();\n                }, []); \n\n    return (\n\n        <div>\n            {isLoading ? (\n                < Loader />\n            ) : (\n                < CountryDropdown />\n            )}\n        </div>\n    )\n}\n\nexport default New","import { select, json, geoPath, geoNaturalEarth1, tsv, zoom, event } from 'd3';\nimport { feature } from 'topojson';\n\nconst DrawMap = () => {\n    console.log(\"drawing map\")\n\n    // setting up svg element on Home component; making size responsive\n    const height = 500\n    const width = 960\n\n    const svg = select(\".mapviz\").append(\"svg\")\n        .attr(\"preserveAspectRatio\", \"xMinYMid meet\")\n        .attr(\"viewBox\", [0, 0, width, height])\n\n    // specifying map projection\n    const projection = geoNaturalEarth1();\n    const pathGenerator = geoPath().projection(projection);\n\n    // creating a group to arrange map elements\n    const g = svg.append(\"g\")\n        .attr(\"class\", \"map-group\")\n    g.append('path')\n        .attr('class', 'sphere')\n        .attr('d', pathGenerator({type: 'Sphere'}));\n\n\n\n    // enabling zooming/panning on entire svg\n    svg.call(zoom().on(\"zoom\", () => {\n        g.attr(\"transform\", event.transform)\n    }))\n\n\n\n    \n    // fetching and loading geographic data\n        // tsvData supplies country names\n        // topoJSONdata supplies geographic coordinates for each country\n    Promise.all([\n        tsv('https://unpkg.com/world-atlas@1.1.4/world/50m.tsv'),\n        json('https://unpkg.com/world-atlas@1.1.4/world/50m.json')\n    ])\n    .then(([ tsvData, topoJSONdata ]) => {\n\n        // parses tsvData to extract country names for base map titles\n        const countryName = {}\n        tsvData.forEach(d => {\n            countryName[d.iso_n3] = d.name\n        })\n\n        // draws a path for each country with countryName as title (shown on hover)\n        const countries = feature(topoJSONdata, topoJSONdata.objects.countries);\n        g.selectAll('path').data(countries.features)\n        .enter().append('path')\n            .attr('class', 'country')\n            .attr('d', pathGenerator)\n        .append(\"title\")\n            .text(d => countryName[d.id])\n    })\n}\n\nexport default DrawMap","export const sizeLegend = (selection, props) => {\n    const {\n      sizeScale,\n      spacing,\n      textOffset,\n      numTicks,\n      tickFormat\n    } = props;\n    \n    const ticks = sizeScale.ticks(numTicks)\n      .filter(d => d !== 0)\n      .reverse();\n  \n    const groups = selection.selectAll('g').data(ticks);\n    const groupsEnter = groups\n      .enter().append('g')\n        .attr('class', 'tick-map');\n    groupsEnter\n      .merge(groups)\n        .attr('transform', (d, i) =>\n          `translate(0, ${i * spacing})`\n        );\n    groups.exit().remove();\n    \n    groupsEnter.append('circle')\n      .merge(groups.select('circle'))\n        .attr('r', sizeScale);\n    \n    groupsEnter.append('text')\n      .merge(groups.select('text'))\n        .text(tickFormat)\n        .attr('dy', '0.32em')\n        .attr('x', d => sizeScale(d) + textOffset);\n  }","export const color = (caseType) => {\n    switch (caseType) {\n        case \"population\":\n            return \"#B396AD\"\n        case \"todayCases\":\n            return \"#B37055\"\n        case \"todayDeaths\":\n            return \"#F6B656\"  \n        case \"cases\":\n            return \"#BD2D28\"\n        case \"active\":\n            return \"#E3BA22\"\n        case \"critical\":\n            return \"#137B80\"\n        case \"deaths\":\n            // return \"#BA5F06\"\n            return \"#E6842A\"\n        case \"recovered\":\n            return \"#A0B700\"\n        case \"tests\":\n            return \"#684664\"\n        case \"casesPerOneMillion\":\n            return \"#9A3E25\"\n        case \"activePerOneMillion\":\n            return \"#F2DA57\"\n        case \"criticalPerOneMillion\":\n            return \"#42A5B3\"\n        case \"deathsPerOneMillion\":\n            return \"#E6842A\"\n        case \"recoveredPerOneMillion\":\n            return \"#5C8100\"\n        case \"testsPerOneMillion\":\n            return \"#8E6C8A\" \n        case \"Confirmed\":   \n            return \"#BD2D28\"\n        case \"Active\":   \n            return \"#E3BA22\"\n        case \"Recovered\":  \n           return \"#A0B700\"\n        case \"Deaths\":   \n            return \"#BA5F06\"\n        default:\n            return \"#BD2D28\"\n    }\n}","import { select, geoNaturalEarth1, scaleSqrt, max, format, selectAll } from 'd3'\nimport { sizeLegend } from './SizeLegend'\nimport { color } from './Color'\nimport DrawMap from './DrawMap'\n\nconst DisplayMapData = (caseType, caseTitle, data) => {\n    data.sort((a, b) => a[`${caseType}`] < b[`${caseType}`] ? 1 : -1)\n\n    // resetting to blank map\n    selectAll(\"circle\").remove()\n    select(\"g.map-legend\").remove()\n    select(\"text.legend-title\").remove()\n\n    // add new caseType data to build new visualization\n    if (caseType !== \"reset\") {    \n\n        const g = select(\".map-group\")\n\n        const projection = geoNaturalEarth1();\n        const radiusValue = d => d[`${caseType}`];\n\n        const sizeScale = scaleSqrt()\n            .domain([0, max(data, d => d[`${caseType}`], radiusValue)])\n            .range([0, 20]);\n\n        g.selectAll('circle').data(data)\n        .enter().append('circle')\n            .attr('class', 'country-circle')\n            // setting x and y coordiantes by translating country coordinate data to pixels\n            .attr(\"transform\", function(d) { return \"translate(\" + projection([d.countryInfo.long, d.countryInfo.lat]) + \")\"; })\n            .attr(\"r\", d => sizeScale(radiusValue(d)))\n            .attr(\"fill\", color(caseType))\n        .append(\"title\")\n            .text(d => d.country + \" \" + caseTitle + \": \"\n            + format(',')(d[`${caseType}`]))\n\n\n\n        // adding size legend\n        const numberFormat = format(',');\n\n        const legend = g.append('g')\n            .attr('transform', `translate(65, 125)`)\n            .attr('class', 'map-legend')\n            .call(sizeLegend, {\n                sizeScale,\n                spacing: 45,\n                textOffset: 10,\n                numTicks: 5,\n                tickFormat: numberFormat \n            })\n\n        // adding map title on side of legend\n        const title = g.append('text')\n            .attr('class', 'legend-title')\n            .text(caseTitle)\n            .attr('transform', 'rotate(270)')\n            .attr('x', -245)\n            .attr('y', 45);\n\n        // color-coding all circles based on caseType from user input\n        g.selectAll(\"circle\")\n            .attr(\"fill\", color(caseType));\n\n        // raises the current circle when moused over\n        // selectAll(\"circle\").on(\"mouseover\", function(){\n        //     select(this).raise()\n        // });\n    } else {\n        // remove entire svg and re-draw map to reset to original zoom level\n        select(\"svg\").remove()\n        DrawMap()\n    }\n}\n\nexport default DisplayMapData","// doesn't require redux\n\nimport React, { useState, useEffect } from 'react';\nimport DisplayMapData from '../d3/DisplayMapData'\nimport { Loader } from '../components/Loader'\n\nconst MapInput = () => {\n\n    const [countryResults, setCountryResults] = useState([])\n    const [isLoading, setIsLoading] = useState(false);\n\n\n    useEffect( () => {\n        async function fetchData() {\n            setIsLoading(true);\n            const response = await fetch('https://corona.lmao.ninja/v2/countries')\n            const data = await response.json()\n            setCountryResults(data)\n            setIsLoading(false);\n        }\n        fetchData();\n    }, [])   \n    \n    // logic for collapsing map choices\n    // let coll = document.getElementsByClassName(\"collapsible1\");\n    // let collButton = document.querySelector(\"button.collapsible1\")\n    // let i\n\n    // for (i = 0; i < coll.length; i++) {\n    //     coll[i].addEventListener(\"click\", function() {\n    //         this.classList.toggle(\"active\");\n\n    //         if (collButton.innerText === \"Open Map Menu\") {\n    //             collButton.innerText = \"Close Map Menu\"\n    //         } else {\n    //             collButton.innerText = \"Open Map Menu\"\n    //         }\n            \n    //         var content = this.nextElementSibling;\n    //         if (content.style.display === \"none\") {\n    //           content.style.display = \"block\";\n    //         } else {\n    //           content.style.display = \"none\";\n    //         }\n    //     });\n    // }\n\n\n    return (\n        <div>\n            {/* loading */}\n            {isLoading ? (\n                < Loader />\n            ) : (\n\n            // )}\n\n            <span>\n\n                {/* <button className=\"collapsible1\">Close Map Menu</button> */}\n\n                {/* <div className=\"content1\"> */}\n                    <button onClick={event => DisplayMapData(event.target.value, event.target.innerText, countryResults)} className=\"cases block\" value=\"cases\">Total Cases</button>\n                    <button onClick={event => DisplayMapData(event.target.value, event.target.innerText, countryResults)} className=\"casesPerOneMillion block\" value=\"casesPerOneMillion\">Total Cases Per Million</button>\n                    <button onClick={event => DisplayMapData(event.target.value, event.target.innerText, countryResults)} className=\"todayCases block\" value=\"todayCases\">New Cases Today</button>\n                    <button onClick={event => DisplayMapData(event.target.value, event.target.innerText, countryResults)} className=\"deaths block\" value=\"deaths\">Total Deaths</button>\n                    <button onClick={event => DisplayMapData(event.target.value, event.target.innerText, countryResults)} className=\"deathsPerOneMillion block\" value=\"deathsPerOneMillion\">Deaths Per Million</button>\n                    <button onClick={event => DisplayMapData(event.target.value, event.target.innerText, countryResults)} className=\"todayDeaths block\" value=\"todayDeaths\">New Deaths Today</button>\n                    <button onClick={event => DisplayMapData(event.target.value, event.target.innerText, countryResults)} className=\"activee block\" value=\"active\">Active Cases</button>\n                    <button onClick={event => DisplayMapData(event.target.value, event.target.innerText, countryResults)} className=\"activePerOneMillion block\" value=\"activePerOneMillion\">Active Cases Per Million</button>\n                    <button onClick={event => DisplayMapData(event.target.value, event.target.innerText, countryResults)} className=\"recovered block\" value=\"recovered\">Recovered Cases</button>\n                    <button onClick={event => DisplayMapData(event.target.value, event.target.innerText, countryResults)} className=\"recoveredPerOneMillion block\" value=\"recoveredPerOneMillion\">Recovered Cases Per Million</button>\n                    <button onClick={event => DisplayMapData(event.target.value, event.target.innerText, countryResults)} className=\"critical block\" value=\"critical\">Critical Cases</button>\n                    <button onClick={event => DisplayMapData(event.target.value, event.target.innerText, countryResults)} className=\"criticalPerOneMillion block\" value=\"criticalPerOneMillion\">Critical Cases Per Million</button>\n                    <button onClick={event => DisplayMapData(event.target.value, event.target.innerText, countryResults)} className=\"tests block\" value=\"tests\">Number of Tests</button>\n                    <button onClick={event => DisplayMapData(event.target.value, event.target.innerText, countryResults)} className=\"testsPerOneMillion block\" value=\"testsPerOneMillion\">Tests Per Million</button>\n                    <button onClick={event => DisplayMapData(event.target.value, event.target.innerText, countryResults)} className=\"population block\" value=\"population\">Population</button>\n                    <button onClick={event => DisplayMapData(event.target.value, event.target.innerText, countryResults)} className=\"reset block\" value=\"reset\">Reset Map</button>\n                {/* </div> */}\n\n            </span>\n\n            )}\n        </div>\n    )\n}\n\nexport default MapInput","// doesn't require redux\n\nimport React, { useEffect } from 'react';\n\nimport DrawMap from '../d3/DrawMap'\nimport MapInput from '../components/MapInput'\n\nimport { Row } from 'react-bootstrap'\nimport { Col } from 'react-bootstrap'\nimport { Card } from 'react-bootstrap'\n\n\nconst Home = () => {\n\n    useEffect( () => {\n        DrawMap(); \n    }, [])\n\n    return (\n        <Row>\n            <Col sm=\"12\" md=\"3\" lg=\"3\" xl=\"3\">\n                <Card>\n                    <MapInput />\n                </Card>\n            </Col>\n            <Col sm=\"12\" md=\"9\" lg=\"9\" xl=\"9\" >\n                <Card className=\"mapviz\">\n\n                </Card>\n            </Col>\n        </Row>\n    )\n}\n\nexport default Home","import { max, scaleBand, scaleLinear, axisBottom, axisLeft, select } from 'd3'\nimport d3Tip from \"d3-tip\";\nimport { color } from './Color'\n\nconst DrawBar = (countryName, totalCases, dailyData, id, caseType) => {\n\n    caseType ? caseType = caseType : caseType = \"total\"\n\n    function jsUcfirst(string) {\n        return string.charAt(0).toUpperCase() + string.slice(1);\n    }\n\n    // setting up constants for sizes\n    const width = 960\n    const height = 500\n    const padding = .2\n    const margin = ({top: 80, right: 0, bottom: 80, left: 80})\n    const innerWidth = width - margin.left - margin.right;\n    // const innerHeight = height - margin.top - margin.bottom;\n    const vizName = \"viz\" + id\n\n\n    // setting constants for text labels and title\n    const xAxisLabel = \"Number of Days\"\n    const yAxisLabel = caseType ? `Number of Cases: ${jsUcfirst(caseType)}` : \"Number of Cases\"\n    const title = countryName\n    const subtitle = () => {\n        if (dailyData.length > 0) {\n            return totalCases.toLocaleString('en') + \" COVID-19 Cases Reported Since \" + dailyData[0].date.toLocaleDateString()\n        } else {\n            return totalCases + \" COVID-19 Cases Reported\"\n        }\n    }\n\n\n        \n    \n\n\n    const xScale = scaleBand()\n        .domain(dailyData.map(d => d.dayCount))\n        .range([margin.left, width - margin.right])\n        .padding(padding)\n\n\n\n\n    const yScale = scaleLinear()\n        .domain([0, max(dailyData, d => d[`${caseType}`])])\n        .range([height - margin.bottom, margin.top])\n\n\n\n\n    const xAxis = (g) => {\n        g.attr(\"transform\", `translate(0,${height - margin.bottom})`)\n        .call(axisBottom(xScale)\n        .tickValues(xScale.domain().filter(function(d,i){ return !(((i+1)%5))})))\n\n\n        .call(g => g.append(\"text\")\n            .attr(\"x\", -margin.left)\n            .attr(\"y\", 10)\n            .attr(\"fill\", \"currentColor\")\n            .attr(\"text-anchor\", \"start\")\n            .text(dailyData.dayCount))\n    }\n\n    \n    const yAxis = (g) => {\n        g.attr(\"transform\", `translate(${margin.left},0)`)\n        .call(axisLeft(yScale).ticks(null, dailyData.format).tickSize(-innerWidth))\n            \n            .call(g => g.select(\".domain\").remove())\n\n        .call(g => g.append(\"text\")\n            .attr(\"x\", -margin.left)\n            .attr(\"y\", 10)\n            .attr(\"fill\", \"currentColor\")\n            .attr(\"text-anchor\", \"start\")\n            .text(dailyData.total))\n    }\n\n\n\n    // setting up tooltip with data labels\n    const tip = d3Tip()\n        .attr('class', 'd3-tip')\n        .offset([-10, 0])\n        .html(function(d) {\n            return \"<p>\" + \"<span style='color:white'>\" + \"Day \" + d.dayCount.toLocaleString('en') + \"<br/>\" +\n                d.date.toLocaleDateString() + \"<br/>\" + \"</span>\" +\n                \"<span style='color:#BD2D28'>\" + d.total.toLocaleString('en') + \" Total\" + \"<br/>\" + \"</span>\" +\n                \"<span style='color:#E3BA22'>\" + d.active.toLocaleString('en') + \" Active\" + \"<br/>\" + \"</span>\" +\n                \"<span style='color:#A0B700'>\" + d.recovered.toLocaleString('en') + \" Recovered\" + \"<br/>\" + \"</span>\" +\n                \"<span style='color:#BA5F06'>\" + d.deaths.toLocaleString('en') + \" Deaths\" + \"</p>\" \n        })\n        \n\n\n\n\n    \n\n\n\n    // setting up svg element on card\n    const svg = select(`.${vizName}`)\n        .append(\"svg\")\n        .attr(\"preserveAspectRatio\", \"xMinYMid meet\")\n        .attr(\"viewBox\", [0, 0, width, height])\n\n    const g = svg.append(\"g\")\n        .attr(\"fill\", color(caseType))\n        .selectAll('rect')\n        .data(dailyData)\n        .join(\"rect\")\n        .attr('x', d => xScale(d.dayCount))\n\n        .attr(\"y\", d => yScale(d[`${caseType}`]))\n        .attr(\"width\", xScale.bandwidth())\n        .attr(\"height\", d => yScale(0) - yScale(d[`${caseType}`]))\n        .attr(\"class\", \"bar\")\n        .on('mouseover', tip.show)\n        .on('mouseout', tip.hide)\n\n\n\n\n    const xAxisG = svg.append('g')\n        .call(xAxis)\n        \n    xAxisG.select('.domain').remove();\n    \n    xAxisG.append('text')\n        .attr('class', 'axis-label')\n        .attr('y', 45)\n        .attr('x', innerWidth / 2)\n        .attr('fill', 'black')\n        .text(xAxisLabel)\n\n\n\n\n\n\n\n    const yAxisG = svg.append('g')\n        .call(yAxis)\n        \n    yAxisG.select('.domain').remove();\n    \n    yAxisG.append('text')\n        .attr('class', 'axis-label')\n        .attr('y', -60)\n        .attr('x', -height / 2)\n        .attr('fill', 'black')\n        .attr('transform', `rotate(-90)`)\n        .attr('text-anchor', 'middle')\n        .text(yAxisLabel);\n\n\n\n    const titleG = svg.append(\"g\")\n\n    titleG.append('text')\n        .attr('class', 'title')\n        .attr('x', width / 2)\n        .attr('y', 40)\n        .attr('text-anchor', 'middle')\n        .text(title);\n\n        titleG.append('text')\n        .attr('class', 'subtitle')\n        .attr('x', width / 2)\n        .attr('y', 70)\n        .attr('text-anchor', 'middle')\n        .text(subtitle());\n\n    svg.call(tip);\n\n}\n\n\n\n\nexport default DrawBar","import React, { useEffect } from 'react';\nimport DrawBar from './DrawBar'\n\nconst Viz = ( {caseType, countryName, totalCases, dailyData, slug}) => {\n\n    useEffect( () => {\n\n        DrawBar(countryName, totalCases, dailyData, slug, caseType)\n    }, [caseType])\n\n    return (\n        <div className={\"viz\" + slug} ></div>\n    )\n}\n\nexport default Viz","import React from 'react';\nimport Viz from '../d3/Viz'\nimport { useSelector } from 'react-redux'\nimport { NavLink } from 'react-router-dom';\nimport { Loader } from './Loader'\n\nconst Province = ({caseType, province, provinceData}) => {\n    province ? province = province : province = provinceData[0].Country\n    console.log(province)\n    console.log(provinceData)\n    const totalCases = () => provinceData.length === 0 ? 0 : provinceData[provinceData.length-1].Confirmed\n    const slug = (province) => {\n        return province\n        .toString()\n        .trim()\n        .toLowerCase()\n        .replace(/\\s+/g, \"-\")\n        .replace(/[^\\w\\-]+/g, \"\")\n        .replace(/\\-\\-+/g, \"-\")\n        .replace(/^-+/, \"\")\n        .replace(/-+$/, \"\");\n    }\n\n        const array = []\n        const parseData = (provinceData, array) => {\n            provinceData.forEach( (day, index) => {\n                array.push({\n                    dayCount: index + 1,\n                    date: new Date(day.Date),\n                    total: day.Confirmed, \n                    active: day.Active, \n                    recovered: day.Recovered, \n                    deaths: day.Deaths\n                })\n            })\n            return array\n        }\n\n    if (provinceData) {\n\n        return (\n                // <NavLink to={{\n                //     pathname: `/countries/${slug}`,\n                //     slug\n                //     }}>\n                    <Viz countryName={province} totalCases={totalCases()} dailyData={parseData(provinceData, array)} caseType={caseType} slug={slug(province)}/>\n                // </NavLink>\n        )\n    } else {\n        return <Loader />\n    }\n}\n\nexport default Province","import React from 'react';\nimport Viz from '../d3/Viz'\nimport { useSelector } from 'react-redux'\nimport { NavLink } from 'react-router-dom';\nimport { Loader } from './Loader'\nimport { active } from 'd3';\n\nconst State = ({caseType, state, stateData, countryName}) => {\n    state ? state = state : state = countryName\n\n    const slug = (state) => {\n        return state\n        .toString()\n        .trim()\n        .toLowerCase()\n        .replace(/\\s+/g, \"-\")\n        .replace(/[^\\w\\-]+/g, \"\")\n        .replace(/\\-\\-+/g, \"-\")\n        .replace(/^-+/, \"\")\n        .replace(/-+$/, \"\");\n    }\n\n\n    // need to refactor to merge entries for each day\n        const array = []\n        const parseData = (stateData, array) => {\n            stateData.forEach( day => {\n                const date = day.Date.substring(0, 10)\n                if (!array.includes(date)) {\n                    array.push(date)\n                }\n            })\n\n            const dateArray = array.map(date => stateData.filter(day =>  day.Date.substring(0,10) === date))\n\n            const parsedData = dateArray.map( (d, index) => {\n                const dayCount = index + 1\n                const date = new Date(d[0].Date)\n\n                const total = () => {\n                    let sum = 0\n                    for (let element of d) {\n                        sum += element.Confirmed\n                    }\n                    return sum\n                }\n\n                const active = () => {\n                    let sum = 0\n                    for (let element of d) {\n                        sum += element.Active\n                    }\n                    return sum\n                }\n\n                const recovered = () => {\n                    let sum = 0\n                    for (let element of d) {\n                        sum += element.Recovered\n                    }\n                    return sum\n                }\n\n                const deaths = () => {\n                    let sum = 0\n                    for (let element of d) {\n                        sum += element.Deaths\n                    }\n                    return sum\n                }\n\n                return {dayCount, date, total: total(), active: active(), recovered: recovered(), deaths: deaths()}\n            })\n            return parsedData\n        }\n\n        const dailyData = parseData(stateData, array)\n        const totalCases = dailyData[dailyData.length - 1].total\n\n        return (\n            <Viz countryName={state} totalCases={totalCases} dailyData={dailyData} caseType={caseType} slug={slug(state)}/>\n        )\n}\n\nexport default State\n\n\n    // <NavLink to={{\n    //     pathname: `/countries/${slug}`,\n    //     slug\n    //     }}>\n    // </NavLink>","// need to add loader logic\n\nimport React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux'\n\nimport { Redirect } from \"react-router\"\nimport { Loader } from '../components/Loader'\nimport Province from '../components/Province'\nimport State from '../components/State'\n\n\nimport Viz from '../d3/Viz'\nimport { Card } from 'react-bootstrap'\nimport { Col } from 'react-bootstrap'\nimport { Row } from 'react-bootstrap'\nimport { NavLink } from 'react-router-dom';\n\nimport { selectAll } from 'd3'\n\n\nconst Show = (props) => {\n    const cache = useSelector(state => state.cache)\n    console.log(cache)\n    const provincesData = useSelector(state => state.provincesData)\n    const [caseType, setCaseType] = useState(\"\");\n    const [provinces, setProvinces] = useState([])\n    const [isLoading, setIsLoading] = useState(false);\n    const dispatch = useDispatch()\n    const url = \"https://api.covid19api.com/dayone/country/\" + props.location.slug\n\n\n    useEffect( () => {\n        async function fetchData() {\n\n            if (cache[props.location.slug]) {\n                console.log(\"true - using cached data\")\n                dispatch({ type: 'addProvincesData', payload: cache[props.location.slug] })\n                const provinceArray = []\n                cache[props.location.slug].forEach(d => {\n                    if (!provinceArray.includes(d.Province) && d.Province !== \"\") {\n                        provinceArray.push(d.Province)\n                    } else if (!provinceArray.includes(\"\") && d.Province === \"\")\n                        provinceArray.push(\"\")\n                })\n                const sortedProvinces = provinceArray.sort((a,b) => a > b ? 1 : -1)\n                setProvinces(sortedProvinces)\n\n            } else {\n\n                var requestOptions = {\n                    method: 'GET',\n                    redirect: 'follow'\n                };\n\n                const response = await fetch(url, requestOptions)\n                const data = await response.json()\n                dispatch({ type: 'cacheData', payload: {slug: props.location.slug, data} })\n                dispatch({ type: 'addProvincesData', payload: data})\n\n                const provinceArray = []\n                data.forEach(d => {\n                    if (!provinceArray.includes(d.Province) && d.Province !== \"\") {\n                        provinceArray.push(d.Province)\n                    } else if (!provinceArray.includes(\"\") && d.Province === \"\")\n                        provinceArray.push(\"\")\n                })\n                \n                setProvinces(provinceArray.sort((a,b) => a > b ? 1 : -1))\n            }\n        }\n        fetchData();\n    }, []); \n\n            // Logic if country is United States (because state data is broken down into cities)\n        if (provinces.includes(\"Alabama\")) {\n                return (\n                    <div>\n                        <Row >\n                            <Col xs=\"12\" sm=\"6\" md=\"4\" lg=\"3\" xl=\"3\">\n                                <Card>\n                                    <button onClick={event => (setCaseType(event.target.value), selectAll(\"svg\").remove())} className=\"cases block\" value=\"total\">Total Cases</button>\n                                    <button onClick={event => (setCaseType(event.target.value), selectAll(\"svg\").remove())} className=\"deathsPerOneMillion block\" value=\"deaths\">Deaths</button>\n                                    <button onClick={event => (setCaseType(event.target.value), selectAll(\"svg\").remove())} className=\"activee block\" value=\"active\"> Active Cases</button>\n                                    <button onClick={event => (setCaseType(event.target.value), selectAll(\"svg\").remove())} className=\"recovered block\" value=\"recovered\">Recovered Cases</button>\n                                </Card>\n                            </Col>\n\n                            {provinces.map((state, index) => { \n\n                                    return (\n                                        <Col xs={12} sm={6} md={4} lg={3} key={index}>\n                                            <Card>\n                                                <State caseType={caseType} state={state} stateData={provincesData.filter(day => day.Province === state)} countryName={provincesData[0].Country}/>\n                                            </Card>\n                                        </Col>\n                                    )\n                                })\n                            } \n                        </Row>\n                    </div>\n                )\n\n            // Logic for countries that are not broken down into provinces (such as Mexico)\n            } else if (provinces.length === 1) {\n                return (\n                    <div>\n                        <Row >\n                            <Col xs=\"12\" sm=\"6\" md=\"4\" lg=\"3\" xl=\"3\">\n                                <Card>\n                                    <button onClick={event => (setCaseType(event.target.value), selectAll(\"svg\").remove())} className=\"cases block\" value=\"total\">Total Cases</button>\n                                    <button onClick={event => (setCaseType(event.target.value), selectAll(\"svg\").remove())} className=\"deathsPerOneMillion block\" value=\"deaths\">Deaths</button>\n                                    <button onClick={event => (setCaseType(event.target.value), selectAll(\"svg\").remove())} className=\"activee block\" value=\"active\"> Active Cases</button>\n                                    <button onClick={event => (setCaseType(event.target.value), selectAll(\"svg\").remove())} className=\"recovered block\" value=\"recovered\">Recovered Cases</button>\n                                </Card>\n                            </Col>\n\n                            <Col sm=\"12\" md=\"9\" lg=\"9\" xl=\"9\">\n                                <Card>\n                                    <Province caseType={caseType} province={provincesData[0].Country} provinceData={provincesData}/> \n                                </Card>\n                            </Col>\n                        </Row>\n                    </div>\n                )\n\n            // Logic for all other countries that have data broken down by province (such as China, or United Kingdom)\n            } else {\n                return (\n                    <div>\n                        <Row >\n                            <Col xs=\"12\" sm=\"6\" md=\"4\" lg=\"3\" xl=\"3\">\n                                <Card>\n                                    <button onClick={event => (setCaseType(event.target.value), selectAll(\"svg\").remove())} className=\"cases block\" value=\"total\">Total Cases</button>\n                                    <button onClick={event => (setCaseType(event.target.value), selectAll(\"svg\").remove())} className=\"deathsPerOneMillion block\" value=\"deaths\">Deaths</button>\n                                    <button onClick={event => (setCaseType(event.target.value), selectAll(\"svg\").remove())} className=\"activee block\" value=\"active\"> Active Cases</button>\n                                    <button onClick={event => (setCaseType(event.target.value), selectAll(\"svg\").remove())} className=\"recovered block\" value=\"recovered\">Recovered Cases</button>\n                                </Card>\n                            </Col>\n\n                            {provinces.map((province, index) => { \n                                    return (\n                                        <Col xs={12} sm={6} md={4} lg={3} key={index}>\n                                            <Card>\n                                                <Province caseType={caseType} province={province} provinceData={provincesData.filter(day => day.Province === province)}/> \n                                            </Card>\n                                        </Col>\n                                    )\n                                })\n                            } \n                        </Row>\n                    </div>\n                )\n            }\n\n}\n\nexport default Show\n// ****************************\n\n \n    //     // return <Redirect to='/' />\n    //     return <Redirect to={process.env.PUBLIC_URL} />\n    //     // return <h3>Use the Buttons Above to Get Started</h3>\n    // }\n\n// LOADER LOGIC\n    // return (\n    //     <div>\n    //         {isLoading ? (\n    //             < Loader />\n    //         ) : (\n    //             provinces.map(province => <Province province={province} caseType={caseType} />)\n    //         )}\n    //     </div>\n    // )","import React from 'react';\nimport Viz from '../d3/Viz'\nimport { useSelector } from 'react-redux'\nimport { NavLink } from 'react-router-dom';\n\nconst Country = ({caseType, country}) => {\n    const collection = useSelector(state => state.collection)\n    const countryName = Object.keys(country)[0]\n    const dailyData = country[countryName]\n    const slug = collection.find(obj => obj.country === countryName).slug\n    const totalCases = () => dailyData.length === 0 ? 0 : dailyData[dailyData.length-1].Confirmed\n\n    const array = []\n    const parseData = (data, array) => {\n        data.forEach( (day, index) => {\n            array.push({\n                dayCount: index + 1,\n                date: new Date(day.Date),\n                total: day.Confirmed, \n                active: day.Active, \n                recovered: day.Recovered, \n                deaths: day.Deaths\n            })\n        })\n        return array\n    }\n\n    return (\n        <NavLink to={{\n            pathname: `/countries/${slug}`,\n            slug\n            }}>\n            <Viz countryName={countryName} totalCases={totalCases()} dailyData={parseData(dailyData, array)} caseType={caseType} slug={slug}/>\n        </NavLink>\n    )\n}\n\nexport default Country\n\n","import React, { useState } from 'react';\nimport { Redirect } from \"react-router\"\nimport Country from '../components/Country'\nimport { Card } from 'react-bootstrap'\nimport { Col } from 'react-bootstrap'\nimport { Row } from 'react-bootstrap'\nimport { selectAll } from 'd3'\nimport { useSelector } from 'react-redux'\n\n\nconst Collection = () => {\n    const countryData = useSelector(state => state.countryData)\n    const [caseType, setCaseType] = useState(\"\");\n\n    if (countryData) {\n        return (\n            <div>\n                <Row >\n                    <Col xs=\"12\" sm=\"6\" md=\"4\" lg=\"3\" xl=\"3\">\n                        <Card>\n                            <button onClick={event => (setCaseType(event.target.value), selectAll(\"svg\").remove())} className=\"cases block\" value=\"total\">Total Cases</button>\n                            <button onClick={event => (setCaseType(event.target.value), selectAll(\"svg\").remove())} className=\"deathsPerOneMillion block\" value=\"deaths\">Deaths</button>\n                            <button onClick={event => (setCaseType(event.target.value), selectAll(\"svg\").remove())} className=\"activee block\" value=\"active\"> Active Cases</button>\n                            <button onClick={event => (setCaseType(event.target.value), selectAll(\"svg\").remove())} className=\"recovered block\" value=\"recovered\">Recovered Cases</button>\n                        </Card>\n                    </Col>\n\n                    {countryData.map((country, index) => { \n                        return (\n                            <Col xs={12} sm={6} md={4} lg={3} key={index}>\n                                <Card>\n                                    <Country caseType={caseType} country={country}/> \n                                </Card>\n                            </Col>\n                        )\n                    })}\n                </Row>\n            </div>\n        )\n    } else {\n        return <Redirect to='/' />\n        // return <Redirect to={process.env.PUBLIC_URL} />\n        // return <h3>Use the Buttons Above to Get Started</h3>\n\n    }\n}\n\nexport default Collection\n","// doesn't require redux\n\nimport React from 'react';\n\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\n\nimport './App.css';\n\nimport NavBar from './components/NavBar';\nimport New from './containers/New'\nimport Home from './containers/Home'\nimport Show from './containers/Show'\nimport Collection from './containers/Collection'\n\nimport Container from 'react-bootstrap/Container';\n\n\nfunction App() {\n  return (    \n      <Router basename={process.env.PUBLIC_URL}>\n        <Container fluid >\n          <div >\n            <NavBar />\n            <Route exact path={`/`} render={ (routerProps) => <Home routerProps={routerProps}/>}/>\n            <Route exact path=\"/countries/:slug\" component={Show} />\n            <Route exact path={`/new`} component={New} />\n            <Route exact path={`/collection`} component={Collection} />\n          </div>\n        </Container>\n      </Router>\n  );\n}\n\nexport default App\n","export default function countryDataReducer(state = [], action) {\n    switch (action.type) {\n\n        case 'addCountryData':\n            return [...state, action.payload]\n        default:\n            return state\n    }\n}","import { combineReducers } from 'redux'\n\nimport countriesReducer from './countriesReducer'\nimport collectionReducer from './collectionReducer'\nimport countryDataReducer from './countryDataReducer'\nimport countryReducer from './countryDataReducer'\nimport provincesDataReducer from './provincesDataReducer'\nimport cacheReducer from './cacheReducer'\n\n\n\n\n\nconst rootReducer = combineReducers({\n    cache: cacheReducer,\n    countries: countriesReducer,\n    collection: collectionReducer,\n    countryData: countryDataReducer, \n    country: countryReducer,\n    provincesData: provincesDataReducer\n});\n\nexport default rootReducer","export default function cacheReducer(state = [], action) {\n    switch (action.type) {\n        case 'cacheData':\n            const slug = action.payload.slug\n            const data = action.payload.data\n            return {...state, [slug]: data }\n        default:\n            return state\n    }\n}","export default function countriesReducer(state = [], action) {\n    switch (action.type) {\n        case 'addCountries':\n            return [...action.payload]\n        default:\n            return state\n    }\n}","export default function collectionReducer(state = [], action) {\n    switch (action.type) {\n\n        case 'addCountryToCollection':\n            return [...state, action.payload]\n        default:\n            return state\n    }\n}","export default function provincesDataReducer(state = [], action) {\n    switch (action.type) {\n\n        case 'addProvincesData':\n            return action.payload\n        default:\n            return state\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\n\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers/rootReducer'\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(rootReducer, composeEnhancers(\n    applyMiddleware(thunk)\n  ));\n\n\nReactDOM.render(\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}