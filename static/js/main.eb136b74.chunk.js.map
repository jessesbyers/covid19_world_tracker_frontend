{"version":3,"sources":["components/NavBar.js","components/CountryDropdown.js","containers/New.js","d3/DrawMap.js","d3/SizeLegend.js","d3/Color.js","d3/DisplayMapData.js","components/MapInput.js","containers/Home.js","d3/DrawBar.js","d3/Viz.js","containers/Show.js","components/Country.js","containers/Collection.js","App.js","index.js"],"names":["NavBar","style","paddingBottom","marginBottom","className","to","CountryDropdown","props","useState","collection","setCollection","countryData","setCountryData","Row","Col","xs","sm","md","lg","xl","onChange","event","target","value","split","country","countryName","a","requestOptions","method","redirect","fetch","response","json","data","parsedData","filter","day","Confirmed","fetchData","fetchCountry","placeholder","options","map","option","id","key","name","flagCode","pathname","disabled","length","index","flagUrl","toLowerCase","worldUrl","slug","Card","Header","Img","src","onError","e","New","countries","setCountries","useEffect","sort","b","Country","Slug","ISO2","DrawMap","console","log","svg","select","append","attr","projection","geoNaturalEarth1","pathGenerator","geoPath","g","type","call","zoom","on","transform","Promise","all","tsv","then","tsvData","topoJSONdata","forEach","d","iso_n3","feature","objects","selectAll","features","enter","text","sizeLegend","selection","sizeScale","spacing","textOffset","numTicks","tickFormat","ticks","reverse","groups","groupsEnter","merge","i","exit","remove","color","caseType","DisplayMapData","caseTitle","radiusValue","scaleSqrt","domain","max","range","countryInfo","long","lat","format","numberFormat","MapInput","countryResults","setCountryResults","coll","document","getElementsByClassName","collButton","querySelector","addEventListener","this","classList","toggle","innerText","content","nextElementSibling","display","onClick","Home","DrawBar","totalCases","dailyData","string","margin","innerWidth","vizName","yAxisLabel","charAt","toUpperCase","slice","title","xScale","scaleBand","dayCount","padding","yScale","scaleLinear","tip","d3Tip","offset","html","toLocaleString","date","toLocaleDateString","total","active","recovered","deaths","xAxisG","join","bandwidth","show","hide","axisBottom","tickValues","yAxisG","axisLeft","tickSize","titleG","width","Viz","Show","setCaseType","location","process","Object","keys","array","parseData","push","Date","Active","Recovered","Deaths","Collection","App","basename","Container","fluid","exact","path","render","routerProps","component","ReactDOM","getElementById"],"mappings":"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","file":"static/js/main.eb136b74.chunk.js","sourcesContent":["import React from 'react';\nimport { NavLink } from 'react-router-dom';\n\nconst NavBar = () => {\n\n  return (\n    <div style={{ paddingBottom: '15px', marginBottom: '15px' }}>\n        <h1 className=\"header\" >COVID-19 World Tracker</h1>\n\n        <NavLink \n        to=\"/\">\n          <button className=\"nav\">Home</button>\n        </NavLink>\n\n        <NavLink \n        to=\"/new\">\n          <button className=\"nav\">Create a New Collection</button>\n        </NavLink>\n    </div>\n  );\n}\n\nexport default NavBar;","import React, { useState } from 'react';\nimport { NavLink } from 'react-router-dom';\nimport { Row } from 'react-bootstrap'\nimport { Col } from 'react-bootstrap'\nimport { Card } from 'react-bootstrap'\n\n\n\nconst CountryDropdown = (props) => {\n\n    const [collection, setCollection] = useState([]);\n    const [countryData, setCountryData] = useState([]);\n\n    const fetchCountry = (country, countryName) => {\n\n        async function fetchData() {\n\n            const requestOptions = {\n                method: 'GET',\n                redirect: 'follow'\n            };\n            \n            // const response = await fetch(`https://api.covid19api.com/total/dayone/country/` + `${country}`, requestOptions)\n            const response = await fetch(`https://api.covid19api.com/total/country/` + `${country}`, requestOptions)\n            const data = await response.json()\n            const parsedData = data.filter(day => day.Confirmed > 0)\n            setCountryData(countryData => [...countryData, {[countryName]: [parsedData], slug: country}])\n        }\n\n        fetchData();\n    }\n\n    const invalid = () => collection.length === 0\n\n    return (\n        <div>\n            <Row>\n                <Col xs=\"12\" sm=\"6\" md=\"4\" lg=\"3\" xl=\"3\">\n\n                    <select onChange={ event => {setCollection([...collection, [event.target.value.split(\",\")[1], event.target.value.split(\",\")[2], event.target.value.split(\",\")[0]]]); \n                        fetchCountry(event.target.value.split(\",\")[0], event.target.value.split(\",\")[1])}}>\n\n                        <option placeholder=\"Choose a Collection of Countries\">Choose a Collection of Countries</option>\n                        {props.options.map(option => (\n                            <option\n                            id={props.id}\n                            key={option.value}\n                            value={[option.value, option.name, option.flagCode]}\n                            >\n                            {option.name}\n                            </option>\n                        ))}\n                    </select>\n\n                    <NavLink \n                        to = {{\n                            pathname: `/collection`,\n                            countryData,\n                            collection\n                        }}>\n                        <button className=\"dark\" disabled={invalid()}>View Collection</button>\n                    </NavLink>\n\n                </Col>\n\n\n                {collection.map( (country, index) => {\n                    const flagUrl = `https://disease.sh/assets/img/flags/${country[1].toLowerCase()}.png`\n                    const worldUrl = `https://freesvg.org/img/Globe-Icon-Umber.png`\n                    const slug = country[2]\n\n                    return (\n                        <Col xs={12} sm={6} md={4} lg={3} key={index}>\n                            <Card>\n                                <Card.Header>{country[0]}</Card.Header>\n\n                                <Card.Img key={slug} src={flagUrl} onError={(e)=>{ \n                                    if (e.target.src !== worldUrl) {\n                                        e.target.src=worldUrl;}\n                                    }}/>\n                            </Card>\n                        </Col>\n                    )\n                })}\n            </Row>\n\n        </div>\n    )\n}\n\nexport default CountryDropdown\n\n\n\n","import React, { useState, useEffect } from 'react';\nimport CountryDropdown from '../components/CountryDropdown'\n\nconst New = () => {\n    const [countries, setCountries] = useState([]);\n \n    useEffect( () => {\n        async function fetchData() {\n            var requestOptions = {\n                method: 'GET',\n                redirect: 'follow'\n              };\n\n            const response = await fetch(\"https://api.covid19api.com/countries\", requestOptions)\n            const data = await response.json()\n            setCountries(data)\n        }\n        fetchData();\n    }, []); \n\n    const options = countries.sort((a, b) => (a.Country > b.Country) ? 1 : -1).map( country => {\n        return (\n            {name: country.Country, value: country.Slug, flagCode: country.ISO2}\n        )\n    })\n\n    return (\n        <div>\n            <CountryDropdown options={options} />\n        </div>\n    )\n}\n\nexport default New","import { select, json, geoPath, geoNaturalEarth1, tsv, zoom, event } from 'd3';\nimport { feature } from 'topojson';\n\nconst DrawMap = () => {\n    console.log(\"drawing map\")\n\n    // setting up svg element on Home component; making size responsive\n    const height = 500\n    const width = 960\n\n    const svg = select(\".mapviz\").append(\"svg\")\n        .attr(\"preserveAspectRatio\", \"xMinYMid meet\")\n        .attr(\"viewBox\", [0, 0, width, height])\n\n    // specifying map projection\n    const projection = geoNaturalEarth1();\n    const pathGenerator = geoPath().projection(projection);\n\n    // creating a group to arrange map elements\n    const g = svg.append(\"g\")\n        .attr(\"class\", \"map-group\")\n    g.append('path')\n        .attr('class', 'sphere')\n        .attr('d', pathGenerator({type: 'Sphere'}));\n\n\n\n    // enabling zooming/panning on entire svg\n    svg.call(zoom().on(\"zoom\", () => {\n        g.attr(\"transform\", event.transform)\n    }))\n\n\n\n    \n    // fetching and loading geographic data\n        // tsvData supplies country names\n        // topoJSONdata supplies geographic coordinates for each country\n    Promise.all([\n        tsv('https://unpkg.com/world-atlas@1.1.4/world/50m.tsv'),\n        json('https://unpkg.com/world-atlas@1.1.4/world/50m.json')\n    ])\n    .then(([ tsvData, topoJSONdata ]) => {\n\n        // parses tsvData to extract country names for base map titles\n        const countryName = {}\n        tsvData.forEach(d => {\n            countryName[d.iso_n3] = d.name\n        })\n\n        // draws a path for each country with countryName as title (shown on hover)\n        const countries = feature(topoJSONdata, topoJSONdata.objects.countries);\n        g.selectAll('path').data(countries.features)\n        .enter().append('path')\n            .attr('class', 'country')\n            .attr('d', pathGenerator)\n        .append(\"title\")\n            .text(d => countryName[d.id])\n    })\n}\n\nexport default DrawMap","export const sizeLegend = (selection, props) => {\n    const {\n      sizeScale,\n      spacing,\n      textOffset,\n      numTicks,\n      tickFormat\n    } = props;\n    \n    const ticks = sizeScale.ticks(numTicks)\n      .filter(d => d !== 0)\n      .reverse();\n  \n    const groups = selection.selectAll('g').data(ticks);\n    const groupsEnter = groups\n      .enter().append('g')\n        .attr('class', 'tick-map');\n    groupsEnter\n      .merge(groups)\n        .attr('transform', (d, i) =>\n          `translate(0, ${i * spacing})`\n        );\n    groups.exit().remove();\n    \n    groupsEnter.append('circle')\n      .merge(groups.select('circle'))\n        .attr('r', sizeScale);\n    \n    groupsEnter.append('text')\n      .merge(groups.select('text'))\n        .text(tickFormat)\n        .attr('dy', '0.32em')\n        .attr('x', d => sizeScale(d) + textOffset);\n  }","export const color = (caseType) => {\n    switch (caseType) {\n        case \"population\":\n            return \"#B396AD\"\n        case \"todayCases\":\n            return \"#B37055\"\n        case \"todayDeaths\":\n            return \"#F6B656\"  \n        case \"cases\":\n            return \"#BD2D28\"\n        case \"active\":\n            return \"#E3BA22\"\n        case \"critical\":\n            return \"#137B80\"\n        case \"deaths\":\n            // return \"#BA5F06\"\n            return \"#E6842A\"\n        case \"recovered\":\n            return \"#A0B700\"\n        case \"tests\":\n            return \"#684664\"\n        case \"casesPerOneMillion\":\n            return \"#9A3E25\"\n        case \"activePerOneMillion\":\n            return \"#F2DA57\"\n        case \"criticalPerOneMillion\":\n            return \"#42A5B3\"\n        case \"deathsPerOneMillion\":\n            return \"#E6842A\"\n        case \"recoveredPerOneMillion\":\n            return \"#5C8100\"\n        case \"testsPerOneMillion\":\n            return \"#8E6C8A\" \n        case \"Confirmed\":   \n            return \"#BD2D28\"\n        case \"Active\":   \n            return \"#E3BA22\"\n        case \"Recovered\":  \n           return \"#A0B700\"\n        case \"Deaths\":   \n            return \"#BA5F06\"\n        default:\n            return \"#BD2D28\"\n    }\n}","import { select, geoNaturalEarth1, scaleSqrt, max, format, selectAll, zoom, event} from 'd3'\nimport { sizeLegend } from './SizeLegend'\nimport { color } from './Color'\nimport DrawMap from './DrawMap'\n\nconst DisplayMapData = (caseType, caseTitle, data) => {\n    data.sort((a, b) => a[`${caseType}`] < b[`${caseType}`] ? 1 : -1)\n\n    // resetting to blank map\n    selectAll(\"circle\").remove()\n    select(\"g.map-legend\").remove()\n    select(\"text.legend-title\").remove()\n\n    // add new caseType data to build new visualization\n    if (caseType !== \"reset\") {    \n\n        const g = select(\".map-group\")\n\n        const projection = geoNaturalEarth1();\n        const radiusValue = d => d[`${caseType}`];\n\n        const sizeScale = scaleSqrt()\n            .domain([0, max(data, d => d[`${caseType}`], radiusValue)])\n            .range([0, 20]);\n\n        g.selectAll('circle').data(data)\n        .enter().append('circle')\n            .attr('class', 'country-circle')\n            // setting x and y coordiantes by translating country coordinate data to pixels\n            .attr(\"transform\", function(d) { return \"translate(\" + projection([d.countryInfo.long, d.countryInfo.lat]) + \")\"; })\n            .attr(\"r\", d => sizeScale(radiusValue(d)))\n            .attr(\"fill\", color(caseType))\n        .append(\"title\")\n            .text(d => d.country + \" \" + caseTitle + \": \"\n            + format(',')(d[`${caseType}`]))\n\n\n\n        // adding size legend\n        const numberFormat = format(',');\n\n        const legend = g.append('g')\n            .attr('transform', `translate(65, 125)`)\n            .attr('class', 'map-legend')\n            .call(sizeLegend, {\n                sizeScale,\n                spacing: 45,\n                textOffset: 10,\n                numTicks: 5,\n                tickFormat: numberFormat \n            })\n\n        // adding map title on side of legend\n        const title = g.append('text')\n            .attr('class', 'legend-title')\n            .text(caseTitle)\n            .attr('transform', 'rotate(270)')\n            .attr('x', -245)\n            .attr('y', 45);\n\n        // color-coding all circles based on caseType from user input\n        g.selectAll(\"circle\")\n            .attr(\"fill\", color(caseType));\n\n        // raises the current circle when moused over\n        // selectAll(\"circle\").on(\"mouseover\", function(){\n        //     select(this).raise()\n        // });\n    } else {\n        // remove entire svg and re-draw map to reset to original zoom level\n        select(\"svg\").remove()\n        DrawMap()\n    }\n}\n\nexport default DisplayMapData","import React, { useState, useEffect } from 'react';\nimport DisplayMapData from '../d3/DisplayMapData'\n\nconst MapInput = () => {\n\n    const [countryResults, setCountryResults] = useState([])\n\n    useEffect( () => {\n        async function fetchData() {\n            const response = await fetch('https://corona.lmao.ninja/v2/countries')\n            const data = await response.json()\n            setCountryResults(data)\n        }\n        fetchData();\n    }, [])   \n    \n    // logic for collapsing map choices\n    let coll = document.getElementsByClassName(\"collapsible1\");\n    let collButton = document.querySelector(\"button.collapsible1\")\n    let i\n\n    for (i = 0; i < coll.length; i++) {\n        coll[i].addEventListener(\"click\", function() {\n            this.classList.toggle(\"active\");\n\n            if (collButton.innerText === \"Open Map Menu\") {\n                collButton.innerText = \"Close Map Menu\"\n            } else {\n                collButton.innerText = \"Open Map Menu\"\n            }\n            \n            var content = this.nextElementSibling;\n            if (content.style.display === \"none\") {\n              content.style.display = \"block\";\n            } else {\n              content.style.display = \"none\";\n            }\n        });\n    }\n\n\n    return (\n        <span>\n            <button className=\"collapsible1\">Close Map Menu</button>\n            <div className=\"content1\">\n                <button onClick={event => DisplayMapData(event.target.value, event.target.innerText, countryResults)} className=\"cases block\" value=\"cases\">Total Cases</button>\n                <button onClick={event => DisplayMapData(event.target.value, event.target.innerText, countryResults)} className=\"casesPerOneMillion block\" value=\"casesPerOneMillion\">Total Cases Per Million</button>\n                <button onClick={event => DisplayMapData(event.target.value, event.target.innerText, countryResults)} className=\"todayCases block\" value=\"todayCases\">New Cases Today</button>\n                <button onClick={event => DisplayMapData(event.target.value, event.target.innerText, countryResults)} className=\"deaths block\" value=\"deaths\">Total Deaths</button>\n                <button onClick={event => DisplayMapData(event.target.value, event.target.innerText, countryResults)} className=\"deathsPerOneMillion block\" value=\"deathsPerOneMillion\">Deaths Per Million</button>\n                <button onClick={event => DisplayMapData(event.target.value, event.target.innerText, countryResults)} className=\"todayDeaths block\" value=\"todayDeaths\">New Deaths Today</button>\n                <button onClick={event => DisplayMapData(event.target.value, event.target.innerText, countryResults)} className=\"activee block\" value=\"active\">Active Cases</button>\n                <button onClick={event => DisplayMapData(event.target.value, event.target.innerText, countryResults)} className=\"activePerOneMillion block\" value=\"activePerOneMillion\">Active Cases Per Million</button>\n                <button onClick={event => DisplayMapData(event.target.value, event.target.innerText, countryResults)} className=\"recovered block\" value=\"recovered\">Recovered Cases</button>\n                <button onClick={event => DisplayMapData(event.target.value, event.target.innerText, countryResults)} className=\"recoveredPerOneMillion block\" value=\"recoveredPerOneMillion\">Recovered Cases Per Million</button>\n                <button onClick={event => DisplayMapData(event.target.value, event.target.innerText, countryResults)} className=\"critical block\" value=\"critical\">Critical Cases</button>\n                <button onClick={event => DisplayMapData(event.target.value, event.target.innerText, countryResults)} className=\"criticalPerOneMillion block\" value=\"criticalPerOneMillion\">Critical Cases Per Million</button>\n                <button onClick={event => DisplayMapData(event.target.value, event.target.innerText, countryResults)} className=\"tests block\" value=\"tests\">Number of Tests</button>\n                <button onClick={event => DisplayMapData(event.target.value, event.target.innerText, countryResults)} className=\"testsPerOneMillion block\" value=\"testsPerOneMillion\">Tests Per Million</button>\n                <button onClick={event => DisplayMapData(event.target.value, event.target.innerText, countryResults)} className=\"population block\" value=\"population\">Population</button>\n                <button onClick={event => DisplayMapData(event.target.value, event.target.innerText, countryResults)} className=\"reset block\" value=\"reset\">Reset Map</button>\n            </div>\n        </span>\n    )\n}\n\nexport default MapInput","import React, { useEffect } from 'react';\n\nimport DrawMap from '../d3/DrawMap'\nimport MapInput from '../components/MapInput'\n\nimport { Row } from 'react-bootstrap'\nimport { Col } from 'react-bootstrap'\nimport { Card } from 'react-bootstrap'\n\n\nconst Home = () => {\n\n    useEffect( () => {\n        DrawMap(); \n    }, [])\n\n    return (\n        <Row>\n            <Col sm=\"12\" md=\"3\" lg=\"3\" xl=\"3\">\n                <Card>\n                    <MapInput />\n                </Card>\n            </Col>\n            <Col sm=\"12\" md=\"9\" lg=\"9\" xl=\"9\" >\n                <Card className=\"mapviz\">\n\n                </Card>\n            </Col>\n        </Row>\n    )\n}\n\nexport default Home","import {\n    max, scaleBand, scaleLinear, axisBottom, axisLeft, select\n} from 'd3'\n\nimport d3Tip from \"d3-tip\";\nimport { color } from './Color'\n\n\nconst DrawBar = (countryName, totalCases, dailyData, id, caseType) => {\n\n    caseType ? caseType = caseType : caseType = \"total\"\n\n    function jsUcfirst(string) {\n        return string.charAt(0).toUpperCase() + string.slice(1);\n    }\n\n    // setting up constants for sizes\n    const width = 960\n    const height = 500\n    const padding = .2\n    const margin = ({top: 80, right: 0, bottom: 80, left: 80})\n    const innerWidth = width - margin.left - margin.right;\n    const innerHeight = height - margin.top - margin.bottom;\n    const vizName = \"viz\" + id\n\n\n    // setting constants for text labels and title\n    const xAxisLabel = \"Number of Days\"\n    const yAxisLabel = caseType ? `Number of Cases: ${jsUcfirst(caseType)}` : \"Number of Cases\"\n    const title = countryName\n    const subtitle = () => {\n        if (dailyData.length > 0) {\n            return totalCases + \" COVID-19 Cases Reported Since \" + dailyData[0].date.toLocaleDateString()\n        } else {\n            return totalCases + \" COVID-19 Cases Reported\"\n        }\n    }\n\n\n        \n    \n\n\n    const xScale = scaleBand()\n        .domain(dailyData.map(d => d.dayCount))\n        .range([margin.left, width - margin.right])\n        .padding(padding)\n\n\n\n\n    const yScale = scaleLinear()\n        .domain([0, max(dailyData, d => d[`${caseType}`])])\n        .range([height - margin.bottom, margin.top])\n\n\n\n\n    const xAxis = (g) => {\n        g.attr(\"transform\", `translate(0,${height - margin.bottom})`)\n        .call(axisBottom(xScale)\n        .tickValues(xScale.domain().filter(function(d,i){ return !(((i+1)%5))})))\n\n\n        .call(g => g.append(\"text\")\n            .attr(\"x\", -margin.left)\n            .attr(\"y\", 10)\n            .attr(\"fill\", \"currentColor\")\n            .attr(\"text-anchor\", \"start\")\n            .text(dailyData.dayCount))\n    }\n\n    \n    const yAxis = (g) => {\n        g.attr(\"transform\", `translate(${margin.left},0)`)\n        .call(axisLeft(yScale).ticks(null, dailyData.format).tickSize(-innerWidth))\n            \n            .call(g => g.select(\".domain\").remove())\n\n        .call(g => g.append(\"text\")\n            .attr(\"x\", -margin.left)\n            .attr(\"y\", 10)\n            .attr(\"fill\", \"currentColor\")\n            .attr(\"text-anchor\", \"start\")\n            .text(dailyData.total))\n    }\n\n\n\n    // setting up tooltip with data labels\n    const tip = d3Tip()\n        .attr('class', 'd3-tip')\n        .offset([-10, 0])\n        .html(function(d) {\n            return \"<p>\" + \"<span style='color:white'>\" + \"Day \" + d.dayCount.toLocaleString('en') + \"<br/>\" +\n                d.date.toLocaleDateString() + \"<br/>\" + \"</span>\" +\n                \"<span style='color:#BD2D28'>\" + d.total.toLocaleString('en') + \" Total\" + \"<br/>\" + \"</span>\" +\n                \"<span style='color:#E3BA22'>\" + d.active.toLocaleString('en') + \" Active\" + \"<br/>\" + \"</span>\" +\n                \"<span style='color:#A0B700'>\" + d.recovered.toLocaleString('en') + \" Recovered\" + \"<br/>\" + \"</span>\" +\n                \"<span style='color:#BA5F06'>\" + d.deaths.toLocaleString('en') + \" Deaths\" + \"</p>\" \n        })\n\n\n\n\n    \n\n\n\n    // setting up svg element on card\n    const svg = select(`.${vizName}`)\n        .append(\"svg\")\n        .attr(\"preserveAspectRatio\", \"xMinYMid meet\")\n        .attr(\"viewBox\", [0, 0, width, height])\n\n    const g = svg.append(\"g\")\n        .attr(\"fill\", color(caseType))\n        .selectAll('rect')\n        .data(dailyData)\n        .join(\"rect\")\n        .attr('x', d => xScale(d.dayCount))\n\n        .attr(\"y\", d => yScale(d[`${caseType}`]))\n        .attr(\"width\", xScale.bandwidth())\n        .attr(\"height\", d => yScale(0) - yScale(d[`${caseType}`]))\n        .attr(\"class\", \"bar\")\n        .on('mouseover', tip.show)\n        .on('mouseout', tip.hide)\n\n\n\n\n    const xAxisG = svg.append('g')\n        .call(xAxis)\n        \n    xAxisG.select('.domain').remove();\n    \n    xAxisG.append('text')\n        .attr('class', 'axis-label')\n        .attr('y', 45)\n        .attr('x', innerWidth / 2)\n        .attr('fill', 'black')\n        .text(xAxisLabel)\n\n\n\n\n\n\n\n    const yAxisG = svg.append('g')\n        .call(yAxis)\n        \n    yAxisG.select('.domain').remove();\n    \n    yAxisG.append('text')\n        .attr('class', 'axis-label')\n        .attr('y', -60)\n        .attr('x', -height / 2)\n        .attr('fill', 'black')\n        .attr('transform', `rotate(-90)`)\n        .attr('text-anchor', 'middle')\n        .text(yAxisLabel);\n\n\n\n    const titleG = svg.append(\"g\")\n\n    titleG.append('text')\n        .attr('class', 'title')\n        .attr('x', width / 2)\n        .attr('y', 40)\n        .attr('text-anchor', 'middle')\n        .text(title);\n\n        titleG.append('text')\n        .attr('class', 'subtitle')\n        .attr('x', width / 2)\n        .attr('y', 70)\n        .attr('text-anchor', 'middle')\n        .text(subtitle());\n\n    svg.call(tip);\n\n}\n\nexport default DrawBar","import React, { useEffect } from 'react';\nimport DrawBar from './DrawBar'\n\nconst Viz = (props) => {\n    console.log(props)\n\n    useEffect( () => {\n\n        DrawBar(props.countryName, props.totalCases, props.dailyData, props.id, props.caseType)\n    }, [props])\n\n    return (\n        <div className={\"viz\" + props.id} ></div>\n    )\n}\n\nexport default Viz","import React, { useState } from 'react';\nimport { Redirect } from \"react-router\"\n\nimport Viz from '../d3/Viz'\nimport { Card } from 'react-bootstrap'\nimport { Col } from 'react-bootstrap'\nimport { Row } from 'react-bootstrap'\nimport { NavLink } from 'react-router-dom';\n\nimport { selectAll } from 'd3'\n\n\nconst Show = (props) => {\n    const [caseType, setCaseType] = useState(\"\");\n\n\n    if (props.location.countryName) {\n        return (\n            <div>\n                <Row className=\"justify-content-md-center\">\n                <Col sm=\"12\" md=\"3\" lg=\"3\" xl=\"3\">\n                        <Card>\n                            <button onClick={event => (setCaseType(event.target.value), selectAll(\"svg\").remove())} className=\"cases block\" value=\"total\">Total Cases</button>\n                            <button onClick={event => (setCaseType(event.target.value), selectAll(\"svg\").remove())} className=\"deathsPerOneMillion block\" value=\"deaths\">Deaths</button>\n                            <button onClick={event => (setCaseType(event.target.value), selectAll(\"svg\").remove())} className=\"activee block\" value=\"active\"> Active Cases</button>\n                            <button onClick={event => (setCaseType(event.target.value), selectAll(\"svg\").remove())} className=\"recovered block\" value=\"recovered\">Recovered Cases</button>\n\n\n                            <NavLink\n                                to = {{\n                                    pathname: `/collection`,\n                                    countryData: props.location.collection\n                                }}>\n                                <button className=\"reset block\">Return to Collection</button>\n                            </NavLink>\n                        </Card> \n                    </Col>\n\n                    <Col sm=\"12\" md=\"9\" lg=\"9\" xl=\"9\" >\n                        <Card className=\"show\">\n                            <Viz countryName={props.location.countryName} totalCases={props.location.totalCases} dailyData={props.location.dailyData} id={props.location.slug} slug={props.location.slug} caseType={caseType}/>\n                        </Card>\n                    </Col>\n                </Row>\n            </div>\n        )\n\n    } else {\n        // return <Redirect to='/' />\n        return <Redirect to={process.env.PUBLIC_URL} />\n        // return <h3>Use the Buttons Above to Get Started</h3>\n    }\n}\n\nexport default Show","import React from 'react';\nimport Viz from '../d3/Viz'\n\nimport { NavLink } from 'react-router-dom';\n\n\n\nconst Country = (props) => {\n    const countryName = Object.keys(props.country)[0]\n    const dailyData = props.country[countryName]\n\n    const totalCases = () => {\n        if (dailyData[0].length === 0) {\n            return 0\n        } else {\n            return dailyData[0][dailyData[0].length-1].Confirmed\n        }\n    }\n\n    const array = []\n\n    const parseData = (data, array) => {\n        data[0].forEach( (day, index) => {\n            array.push({\n                dayCount: index + 1,\n                date: new Date(day.Date),\n                total: day.Confirmed, \n                active: day.Active, \n                recovered: day.Recovered, \n                deaths: day.Deaths\n            })\n        })\n        return array\n    }\n\n\n    return (\n        <NavLink\n            to = {{\n                pathname: `/countries/${props.country.slug}`,\n                countryName,\n                totalCases: totalCases(),\n                dailyData: parseData(dailyData, array), \n                slug: props.country.slug, \n                id: props.country.slug,\n                collection: props.collection\n            }}>\n            <Viz countryName={countryName} totalCases={totalCases()} dailyData={parseData(dailyData, array)} id={props.country.slug} slug={props.country.slug} caseType={props.caseType}/>\n        </NavLink>\n    )\n}\n\nexport default Country\n\n","import React, { useState } from 'react';\nimport { Redirect } from \"react-router\"\nimport Country from '../components/Country'\nimport { Card } from 'react-bootstrap'\nimport { Col } from 'react-bootstrap'\nimport { Row } from 'react-bootstrap'\nimport { selectAll } from 'd3'\n\nconst Collection = (props) => {\n    const [caseType, setCaseType] = useState(\"\");\n\n\n    if (props.location.countryData) {\n        return (\n            <div>\n                <Row >\n                    <Col xs=\"12\" sm=\"6\" md=\"4\" lg=\"3\" xl=\"3\">\n                        <Card>\n                            <button onClick={event => (setCaseType(event.target.value), selectAll(\"svg\").remove())} className=\"cases block\" value=\"total\">Total Cases</button>\n                            <button onClick={event => (setCaseType(event.target.value), selectAll(\"svg\").remove())} className=\"deathsPerOneMillion block\" value=\"deaths\">Deaths</button>\n                            <button onClick={event => (setCaseType(event.target.value), selectAll(\"svg\").remove())} className=\"activee block\" value=\"active\"> Active Cases</button>\n                            <button onClick={event => (setCaseType(event.target.value), selectAll(\"svg\").remove())} className=\"recovered block\" value=\"recovered\">Recovered Cases</button>\n                        </Card>\n                    </Col>\n\n                    {props.location.countryData.map((country, index) => { \n                        return (\n                            <Col xs={12} sm={6} md={4} lg={3} key={index}>\n                                <Card>\n                                    <Country key={index} id={index} country={country} caseType={caseType} collection={props.location.countryData}/> \n                                </Card>\n                            </Col>\n                        )\n                    })}\n                </Row>\n            </div>\n        )\n    } else {\n        // return <Redirect to='/' />\n        return <Redirect to={process.env.PUBLIC_URL} />\n        // return <h3>Use the Buttons Above to Get Started</h3>\n\n    }\n}\n\nexport default Collection\n","import React from 'react';\n\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\n\nimport './App.css';\n\nimport NavBar from './components/NavBar';\nimport New from './containers/New'\nimport Home from './containers/Home'\nimport Show from './containers/Show'\nimport Collection from './containers/Collection'\n\nimport Container from 'react-bootstrap/Container';\n\nfunction App() {\n  return (    \n      <Router basename={process.env.PUBLIC_URL}>\n        <Container fluid >\n          <div >\n            <NavBar />\n            <Route exact path={`/`} render={ (routerProps) => <Home routerProps={routerProps}/>}/>\n            <Route exact path=\"/countries/:slug\" component={Show} />\n            <Route exact path={`/new`} component={New} />\n            <Route exact path={`/collection`} component={Collection} />\n          </div>\n        </Container>\n      </Router>\n  );\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\n\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}